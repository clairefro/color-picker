{"version":3,"sources":["components/colorWheel.js","components/swatch.js","components/palette.js","util/chromify.js","components/colorPickerContainer.js","util/parseHSL.js","App.js","index.js","assets/tick.mp3"],"names":["ColorWheel","getColor","useState","play","console","log","tick","setTick","color","setColor","useEffect","UIfx","sound","volume","throttleMs","className","radius","onPreview","Swatch","hex","style","height","width","backgroundColor","component","data-clipboard-text","Palette","baseHsl","scheme","schemeColors","setSchemeColors","cScheme","ColorScheme","from_hue","h","modifiedColors","hexArray","colors","s","l","map","chroma","set","i","key","join","ColorPickerContainer","setBgColor","setBaseHsl","hsl","hslString","match","parseHSL","parseColor","App","bgColor","document","querySelector","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"sRAmCeA,EA5BI,SAAC,GAAoB,IAAjBC,EAAgB,EAAhBA,SAAgB,EACdC,mBAAS,CAACC,KAAM,kBAAIC,QAAQC,IAAI,qBADlB,mBAC9BC,EAD8B,KACxBC,EADwB,OAEXL,mBAAS,IAFE,mBAE9BM,EAF8B,KAEvBC,EAFuB,KAIrCC,qBAAU,WACRT,EAASO,KACT,CAACA,IAEHE,qBAAU,WACRH,EAAQ,IAAII,IAAKC,IAAO,CAACC,OAAQ,GAAKC,WAAY,QAClD,IAMF,OACE,yBAAKC,UAAU,eACb,kBAAC,IAAD,CACEC,OAAQ,IAERC,UAAY,SAACT,GAAD,OARhBC,EAQwCD,QAPxCF,EAAKH,Y,gCCDMe,EAjBA,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACVC,EAAQ,CACZC,OAAQ,QACRC,MAAO,QACPC,gBAAiBJ,GAGnB,OACE,yBAAKJ,UAAU,SAASK,MAAOA,GAC7B,2BAAID,GACJ,kBAAC,IAAD,CAAWK,UAAU,IAAIC,sBAAqBN,GAA9C,U,gBCLN,IA8BeO,EA9BC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAAa,EACC1B,mBAAS,MADV,mBAChC2B,EADgC,KAClBC,EADkB,KAavC,OAVApB,qBAAU,WACR,GAAIiB,EAAS,CACX,IAAMI,EAAU,IAAIC,IACpBD,EAAQE,SAASN,EAAQO,GAClBN,OAAOA,GACd,IAAMO,GCdqBC,EDcKL,EAAQM,SCdHC,EDcaX,EAAQW,ECdlBC,EDcqBZ,EAAQY,ECblEH,EAASI,KAAI,SAAArB,GAClB,OAAOsB,IAAOtB,GAAKuB,IAAI,QAASH,GAAGG,IAAI,QAASJ,GAAGnB,UDajDW,EAAgBK,GCfP,IAAkBC,EAAUE,EAAGC,IDiB1C,CAACZ,IAEIE,EACL,yBAAKd,UAAU,gBACb,2BAAIa,GACJ,yBAAKb,UAAU,WACZc,EAAaW,KAAI,SAACrB,EAAKwB,GAAN,OAChB,kBAAC,EAAD,CAAQC,IAAKD,EAAGxB,IAAKA,QAGzB,kBAAC,IAAD,CAAWM,sBAAqBI,EAAagB,KAAK,OAAlD,aAMF,ME3BJ,IAsDeC,EAtDc,SAAC,GAAqB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACtB7C,mBAAS,IADa,mBACzCM,EADyC,KAClCC,EADkC,OAKlBP,mBAAS,MALS,mBAKzCyB,EALyC,KAKhCqB,EALgC,KA4BhD,OALAtC,qBAAU,YAXS,SAACF,GAClB,GAAc,KAAVA,EAAc,CAEhB,IAAMyC,ECvBL,SAAkBC,GACvB,GAAkB,KAAdA,EAEF,OAAOA,EAAUC,MAAM,2BDoBTC,CAAS5C,EAAMyC,KAI3BD,EAAW,CAAEd,EAAGe,EAAI,GAAIX,EAAGW,EAAI,GAAG,IAAOV,EAAEU,EAAI,GAAG,OAKpDI,CAAW7C,KACV,CAACA,IAIF,oCACE,yBAAKO,UAAU,0BACb,+CACA,6CACA,kBAAC,EAAD,CAAYd,SA1BD,SAACO,GAChBC,EAASD,GACTuC,EAAWvC,EAAMW,QAyBb,yBAAKJ,UAAU,cACb,uBAAGK,MAAO,CAACC,OAAQ,SAAUb,EAAMW,KACnC,yBAAKJ,UAAU,kBACb,kCAAQY,GAAWA,EAAQO,GAC3B,kCAAQP,GAAWA,EAAQW,GAC3B,oCAAUX,GAAWA,EAAQY,MAKnC,yBAAKxB,UAAU,qBACb,kBAAC,EAAD,CAASY,QAASA,EAASC,OAAO,WAClC,kBAAC,EAAD,CAASD,QAASA,EAASC,OAAO,SAClC,kBAAC,EAAD,CAASD,QAASA,EAASC,OAAO,YAClC,kBAAC,EAAD,CAASD,QAASA,EAASC,OAAO,gBElC3B0B,MAlBf,WAAgB,IAAD,EACepD,mBAAS,QADxB,mBACNqD,EADM,KACG9C,EADH,KAWb,OAJAC,qBAAU,WACR8C,SAASC,cAAc,QAAQrC,MAAMG,gBAAkBgC,IACvD,CAACA,IAGD,yBAAKxC,UAAU,MAAMK,MAAO,CAACG,gBAAiBgC,IAC5C,kBAAC,EAAD,CAAsBR,WAVP,SAACvC,GAClBC,EAASD,QCHbkD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFJ,SAASK,eAAe,U,kBCT1BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.af2c2af7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactColorWheel from 'react-touch-color-wheel';\nimport UIfx from 'uifx'\n\n// sound\nimport sound from '../assets/tick.mp3';\n\nconst ColorWheel = ( { getColor } ) => {\n  const [tick, setTick]= useState({play: ()=>console.log(\"can't play yet\")})\n  const [color, setColor] = useState('')\n\n  useEffect(()=> {\n    getColor(color)\n  },[color])\n\n  useEffect(()=> {\n    setTick(new UIfx(sound, {volume: 0.4, throttleMs: 80}))\n  },[])\n\n  const handleChange = (c) => {\n    setColor(c);\n    tick.play();\n  }\n  return (\n    <div className=\"color-wheel\">\n      <ReactColorWheel\n        radius={100}\n        // this will be called once the user has indicated they want a color\n        onPreview={ (color) => handleChange(color)}\n      />\n    </div>\n  );\n}\n\n\nexport default ColorWheel;\n\n// this will be called whenever a color is being previewed\n// onPreview={ ({hsl: 'hsl(...)'}) => {} }\n","import React from 'react';\nimport Clipboard from 'react-clipboard.js';\n\nconst Swatch = ({ hex }) => {\n  const style = {\n    height: '100px',\n    width: '100px',\n    backgroundColor: hex,\n  }\n\n  return (\n    <div className=\"swatch\" style={style} >\n      <p>{hex}</p>\n      <Clipboard component=\"a\" data-clipboard-text={hex}>\n        Copy\n      </Clipboard>\n    </div>\n  )\n}\n\nexport default Swatch;\n","import React, { useState, useEffect } from 'react';\nimport ColorScheme from 'color-scheme';\nimport Clipboard from 'react-clipboard.js';\n\nimport Swatch from './swatch'\n\nimport chromify from '../util/chromify'\n\nconst Palette = ({ baseHsl, scheme }) => {\n  const [schemeColors, setSchemeColors] = useState(null)\n\n  useEffect(()=> {\n    if (baseHsl) {\n      const cScheme = new ColorScheme;\n      cScheme.from_hue(baseHsl.h)\n            .scheme(scheme);\n      const modifiedColors = chromify(cScheme.colors(), baseHsl.s, baseHsl.l);\n      setSchemeColors(modifiedColors);\n    }\n  },[baseHsl])\n\n  return schemeColors ? (\n    <div className=\"palette-info\">\n      <p>{scheme}</p>\n      <div className=\"palette\">\n        {schemeColors.map((hex, i) => (\n          <Swatch key={i} hex={hex}/>\n        ))}\n      </div>\n      <Clipboard data-clipboard-text={schemeColors.join(', ')}>\n      Copy all\n      </Clipboard>\n    </div>\n\n  )\n  : null\n\n}\nexport default Palette;\n","import chroma from 'chroma-js';\n\nexport default function chromify(hexArray, s, l, h) {\n  return hexArray.map(hex => {\n    return chroma(hex).set('hsl.l', l).set('hsl.s', s).hex()\n  });\n}\n","import React, { useState, useEffect } from 'react';\n\nimport ColorPaletteContainer from './colorPaletteContainer';\nimport ColorWheel from './colorWheel';\nimport Palette from './palette';\n\nimport { parseHSL } from '../util/parseHSL'\n\nconst ColorPickerContainer = ( { setBgColor }) => {\n  const [color, setColor] = useState('')\n  // const [baseHue, setBaseHue] = useState(0)\n  // const [baseSat, setBaseSat] = useState(0)\n  // const [baseLight, setBaseLight] = useState(0)\n  const [baseHsl, setBaseHsl] = useState(null)\n\n  const getColor = (color) => {\n    setColor(color)\n    setBgColor(color.hex)\n  }\n\n  const parseColor = (color) => {\n    if (color !== '') {\n      // parse hsl\n      const hsl = parseHSL(color.hsl);\n      // setBaseHue(hsl[1]);\n      // setBaseSat(hsl[2]);\n      // setBaseLight(hsl[3]);\n      setBaseHsl({ h: hsl[1], s: hsl[2]/100.0, l:hsl[3]/100.0})\n    }\n  }\n\n  useEffect(()=> {\n    parseColor(color)\n  }, [color])\n\n\n  return (\n    <>\n      <div className=\"color-picker-container\">\n        <h2>Pick base color</h2>\n        <p>Drag to refine</p>\n        <ColorWheel getColor={getColor}/>\n        <div className=\"color-info\">\n          <p style={{height: '1rem'}}>{color.hex}</p>\n          <div className=\"base-color-hsl\">\n            <p>Hue {baseHsl && baseHsl.h}</p>\n            <p>Sat {baseHsl && baseHsl.s}</p>\n            <p>Light {baseHsl && baseHsl.l}</p>\n          </div>\n        </div>\n\n      </div>\n      <div className=\"palette-container\">\n        <Palette baseHsl={baseHsl} scheme=\"triade\"/>\n        <Palette baseHsl={baseHsl} scheme=\"mono\"/>\n        <Palette baseHsl={baseHsl} scheme=\"tetrade\"/>\n        <Palette baseHsl={baseHsl} scheme=\"analogic\"/>\n      </div>\n    </>\n  );\n}\n\nexport default ColorPickerContainer;\n","export function parseHSL(hslString){\n  if (hslString !== '') {\n    // parse hsl\n    return hslString.match(/\\((\\d+), (\\d+)%, (\\d+)%/);\n  }\n}\n","import React, { useState, useEffect } from 'react';\n\nimport ColorPickerContainer from './components/colorPickerContainer';\n\nfunction App() {\n  const [bgColor, setColor] = useState('#FFF');\n\n  const setBgColor = (color) => {\n    setColor(color)\n  }\n\n  useEffect(()=> {\n    document.querySelector('body').style.backgroundColor = bgColor;\n  },[bgColor])\n\n  return (\n    <div className=\"App\" style={{backgroundColor: bgColor}}>\n      <ColorPickerContainer setBgColor={setBgColor}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/tick.99031276.mp3\";"],"sourceRoot":""}